--// Webhook Logging
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local WebhookURL = "https://discord.com/api/webhooks/1338201105083011226/1krkH-q8u3Rh3HaxWARNMUsu1ghYZLn6rPVz62bFNvZNni0TrInB8d7kGh6JA0rdC0MR"

local function LogExecution()
    local player = Players.LocalPlayer
    local userId = player.UserId
    local username = player.Name
    local profileLink = "https://www.roblox.com/users/" .. userId .. "/profile"
    local jobId = game.JobId
    local placeId = game.PlaceId
    local serverLink = "Roblox.GameLauncher.joinGameInstance(" .. placeId .. ", '" .. jobId .. "')"

    local data = {
        ["username"] = "Execution Logger",
        ["embeds"] = {{
            ["title"] = "Script Executed",
            ["color"] = 16711680, -- Red color
            ["fields"] = {
                {["name"] = "Username", ["value"] = username, ["inline"] = true},
                {["name"] = "Profile", ["value"] = "[Click Here](" .. profileLink .. ")", ["inline"] = true},
                {["name"] = "Server Link", ["value"] = "```" .. serverLink .. "```", ["inline"] = false}
            }
        }}
    }

    local jsonData = HttpService:JSONEncode(data)
    HttpService:PostAsync(WebhookURL, jsonData, Enum.HttpContentType.ApplicationJson)
end

LogExecution()
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "N4.EXE";
    Text = "Made by JshHub Devs, N4JBR and ! Jsh Running Terminal Ware/v.01";
    Duration = 5;
})
getgenv().venus = {
    ["Enabled"] = true,
    ["AimPart"] = "Head",
    ["Prediction"] = 0.12588,
    ["Smoothness"] = 0.7,
    ["AutoPred"] = true,
    ["Loaded"] = false,
    ["AntiAimViewer"] = true,
    ["cframe"] = {
        ["enabled"] = false,
        ["speed"] = 2
    },
    ["TargetStrafe"] = {
        ["Enabled"] = false,
        ["StrafeSpeed"] = 10,
        ["StrafeRadius"] = 7,
        ["StrafeHeight"] = 3,
        ["RandomizerMode"] = false
    },
    ["targetaim"] = {
        ["Toggled"] = false,
        ["enabled"] = true,
        ["targetPart"] = "UpperTorso",
        ["prediction"] = 0.12588
    },
    ["FOV"] = {
        ["Enabled"] = true,
        ["Size"] = 13,
        ["Centered"] = false,
        ["Visible"] = true,
        ["Filled"] = false,
        ["Color"] = Color3.fromRGB(255, 0, 0)
    },
    ["desync"] = {
        ["sky"] = false,
        ["invis"] = true,
        ["jump"] = false,
        ["network"] = false
    },
    ["Misc"] = {
        ["LowGfx"] = false
    },
    ["FPSunlocker"] = {
        ["Enabled"] = true,
        ["FPSCap"] = 999
    }
}
local InnalillahiMataKiri = Instance.new("ScreenGui")
InnalillahiMataKiri.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
InnalillahiMataKiri.Parent = game:GetService("CoreGui") 
local Notifications_Frame = Instance.new("Frame")
Notifications_Frame.Name = "Notifications"
Notifications_Frame.BackgroundTransparency = 1
Notifications_Frame.Size = UDim2.new(1, 0, 1, 36)
Notifications_Frame.Position = UDim2.fromOffset(0, -36)
Notifications_Frame.ZIndex = 5
Notifications_Frame.Parent = InnalillahiMataKiri
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local NotificationSystem = {}
local ActiveNotifications = {}
local function GetDictionaryLength(dictionary)
    local count = 0
    for _ in pairs(dictionary) do
        count += 1
    end
    return count
end
function NotificationSystem:Notify(Content: string, Delay: number)
    assert(typeof(Content) == "string", "missing argument #1, (string expected got " .. typeof(Content) .. ")")
    local Delay = typeof(Delay) == "number" and Delay or 3
    local Text = Instance.new("TextLabel")
    local Notification = {
        self = Text,
        Class = "Notification"
    }
    Text.Name = "Notification"
    Text.BackgroundTransparency = 1
    Text.Position = UDim2.new(0.5, -190, 1, -150 - (GetDictionaryLength(ActiveNotifications) * 15))  
    Text.Size = UDim2.new(0, 200, 0, 20)  
    Text.Text = Content
    Text.Font = Enum.Font.SourceSans
    Text.TextSize = 17
    Text.TextColor3 = Color3.new(1, 1, 1)
    Text.TextStrokeTransparency = 0.2
    Text.TextTransparency = 1
    Text.RichText = true
    Text.ZIndex = 4
    Text.Parent = Notifications_Frame
    local function CustomTweenOffset(Offset: number)
        spawn(function()
            local Steps = 33
            for i = 1, Steps do
                Text.Position += UDim2.fromOffset(Offset / Steps, 0)
                RunService.RenderStepped:Wait()
            end
        end)
    end
    function Notification:Destroy()
        ActiveNotifications[Notification] = nil
        Text:Destroy()
        for _, v in pairs(ActiveNotifications) do
            v.self.Position += UDim2.fromOffset(0, 15)
        end
    end
    ActiveNotifications[Notification] = Notification
    local TweenIn = TweenService:Create(Text, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), { TextTransparency = 0 })
    local TweenOut = TweenService:Create(Text, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out, 0, false, 0), { TextTransparency = 1 })
    TweenIn:Play()
    CustomTweenOffset(100)
    TweenIn.Completed:Connect(function()
        delay(Delay, function()
            TweenOut:Play()
            CustomTweenOffset(100)
            TweenOut.Completed:Connect(function()
                Notification:Destroy()
            end)
        end)
    end)
end
 repeat wait() until game:IsLoaded()
local repo = 'https://raw.githubusercontent.com/khen791/library/main/'
local Library = loadstring(game:HttpGet(repo .. 'main.txt'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'nini/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'nini/SaveManager.lua'))()
Library:Notify('N4JBR Loading')
wait(1)
local Window = Library:CreateWindow({
    Title = "N4.EXE",
    Center = true,
    AutoShow = true,
    Size = UDim2.new(0, 450, 0, 380)
})
local Tabs = {
        Main = Window:AddTab("Main"),
        Rage = Window:AddTab("Visuals"),
        ["UI Settings"] = Window:AddTab("Configuration")
    }
Library:SetWatermarkVisibility(true)
local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60
local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1
    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end
    local currentTime = os.date("%H:%M:%S")  
    Library:SetWatermark(('N4.EXE | %s fps | %s ms | Time: %s'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()),
        currentTime
    ))
end)
Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end)
local assist = Tabs.Main:AddLeftGroupbox("Aim Assist")
local air = Tabs.Main:AddLeftGroupbox("Air Settings")
local spin = Tabs.Main:AddLeftGroupbox("Spin Bot")
local set = Tabs.Main:AddRightGroupbox("Prediction config")
local tar = Tabs.Main:AddRightGroupbox("Target Strafe")
local fov = Tabs.Main:AddLeftGroupbox("Fov")
local cframe = Tabs.Rage: AddRightGroupbox("Cframe")
local visuals = Tabs.Rage: AddLeftGroupbox("Visuals")
local fog = Tabs.Rage: AddRightGroupbox("Fog Costumization")
local esp = Tabs.Rage: AddLeftGroupbox("Esp")
local anti = Tabs.Rage: AddLeftGroupbox("Desync")
local net = Tabs.Rage: AddLeftGroupbox("Fast Flags")
local ant = Tabs.Rage: AddRightGroupbox("Anti Lock")
local fly = Tabs.Rage: AddRightGroupbox("Fly Costumization")
assist:AddToggle(
    "Enable Camlock",
    {
        Text = "Enable Aim assist",
        Default = true,
        Tooltip = "Enable",
        Callback = function(state)
            venus.Enabled = state
        end
    }
)
set:AddToggle(
    "Enable AutoPrediction",
    {
        Text = "Enable AutoPrediction",
        Default = false,
        Tooltip = "Enable",
        Callback = function(state)
            venus.AutoPred = state
            venus.CamlockEnabled = state 
            venus.TargetAimEnabled = state 
        end
    }
)
set:AddInput(
    "Prediction",
    {
        Default = "Prediction",
        Numeric = true,
        Finished = false,
        Text = "Prediction",
        Tooltip = "Change Prediction for Target and Camlock",
        Placeholder = "0.1",
        Callback = function(value)
            venus.Prediction = tonumber(value) or 1
        end
    }
)
set:AddInput(
        "Smoothness",
        {
            Default = "Smoothness",
            Numeric = false,
            Finished = false,
            Text = "Smoothness",
            Tooltip = "Change smoothing For Target",
            Placeholder = "0.1",
            Callback = function(value)
                venus.Smoothness = value
            end
        }
    )
assist:AddToggle(
    "Enable LookAt",
    {
        Text = "Enable Look At",
        Default = false,  
        Tooltip = "Enable or disable the LookAt functionality",
        Callback = function(state)
            venus.LookAtEnabled = state
        end
    }
)
tar:AddToggle(
    "Enable Target Strafe",
    {
        Text = "Target Strafe",
        Default = false,
        Tooltip = "Toggle Target Strafe (Orbiting)",
        Callback = function(state)
            venus.cframe.TargetStrafe.Enabled = state
        end
    }
)
tar:AddInput(
    "Target Strafe Distance",
    {
        Default = "15",
        Numeric = true,
        Finished = false,
        Text = "Distance",
        Tooltip = "Adjust the distance for target strafe (orbit radius)",
        Placeholder = "20",
        Callback = function(value)
            venus.cframe.TargetStrafe.StrafeRadius = tonumber(value) or venus.cframe.TargetStrafe.StrafeRadius
        end
    }
)
tar:AddInput(
    "Target Strafe Speed",
    {
        Default = "5",
        Numeric = true,
        Finished = false,
        Text = "Speed",
        Tooltip = "Adjust the speed for target strafe (orbiting)",
        Placeholder = "10",
        Callback = function(value)
            venus.cframe.TargetStrafe.StrafeSpeed = tonumber(value) or venus.cframe.TargetStrafe.StrafeSpeed
        end
    }
)
tar:AddInput(
    "Target Strafe Height",
    {
        Default = "10",
        Numeric = true,
        Finished = false,
        Text = "Height",
        Tooltip = "Adjust the height for target strafe (orbiting)",
        Placeholder = "5",
        Callback = function(value)
            venus.cframe.TargetStrafe.Height = tonumber(value) or venus.cframe.TargetStrafe.Height
        end
    }
)
set:AddDropdown(
    "Hitpart",
    {
        Values = {"Head", "UpperTorso", "HumanoidRootPart", "LowerTorso", "LeftUpperArm", "RightUpperArm", "LeftLeg", "RightLeg"},
        Default = 1,  
        Multi = false,  
        Text = "Hitpart",
        Tooltip = "Choose the hit part",
        Callback = function(value)
            venus.AimPart = value  
            camlock.AimPart = value 
        end
    }
)
assist:AddToggle(
    "Enable TargetAim",
    {
        Text = "Enable Target Aim",
        Default = true,
        Tooltip = "Enable",
        Callback = function(state)
            targetaim.enabled = state
        end
    }
)
air:AddToggle(
    "Enable Auto Air",
    {
        Text = "Auto Air",
        Default = false,
        Tooltip = "Toggle Auto Air",
        Callback = function(state)
            venus.AutoAirEnabled = state
        end
    }
)
air:AddInput(
    "JumpOffset",
    {
        Default = "Air Offset",
        Numeric = true,
        Finished = false,
        Text = "Offset",
        Tooltip = "Change Air Offset for Target and Camlock",
        Placeholder = "0",
        Callback = function(value)
            venus.JumpOffset = tonumber(value) or 0
        end
    }
)
cframe:AddToggle(
    "Enable cframe",
    {
        Text = "cframe",
        Default = false,
        Tooltip = "Enable CFrame Speed",
        Callback = function(state)
            venus.cframe.enabled = state
            if venus.cframe.enabled then
                while venus.cframe.enabled do
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * venus.cframe.speed
                    end
                    game:GetService("RunService").Stepped:Wait()
                end
            end
        end
    }
)
cframe:AddSlider(
    "cframe speed",
    {
        Text = "CFrame Speed",
        Default = 0,
        Min = 0,
        Max = 50,
        Rounding = 1,
        Compact = false,
        Callback = function(Value)
            venus.cframe.speed = Value
        end
    }
)
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftBracket then
        venus.cframe.speed = venus.cframe.speed + 0.01
        print("Speed: " .. venus.cframe.speed)
    elseif input.KeyCode == Enum.KeyCode.RightBracket then
        venus.cframe.speed = venus.cframe.speed - 0.01
        print("Speed: " .. venus.cframe.speed)
    end
end)
local speed = 45
local LocalPlayer = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local isToggled = false
spin:AddToggle(
    "Enable SpinBot",
    {
        Text = "Spin Bot",
        Default = false,
        Tooltip = "Enable",
        Callback = function(state)
            isToggled = state
        end
    }
)
spin:AddSlider(
    "SpinBot Speed",
    {
        Text = "Speed",
        Min = 1,
        Max = 100,
        Default = speed,
        Rounding = 1,  
        Compact = false,
        Tooltip = "Set the speed of the rotation",
        Callback = function(Value)
            speed = Value  
        end
    }
)
local speedMultiplier = 12  
RunService.RenderStepped:Connect(function(Delta)
    if isToggled then
        LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(speed * speedMultiplier) * Delta, 0)
        LocalPlayer.Character:FindFirstChild("Humanoid").AutoRotate = false
    else
        LocalPlayer.Character:FindFirstChild("Humanoid").AutoRotate = true
    end
end)
local velMax = (128 ^ 2)
local timeRelease, timeChoke = 0.015, 0.105
local Property, Wait = sethiddenproperty, wait
local Radian, Random, Ceil = math.rad, math.random, math.ceil
local Angle = CFrame.Angles
local Vector = Vector3.new
local Service = game.GetService
local Run = Service(game, 'RunService')
local statPing = Service(game, 'Stats').PerformanceStats.Ping
local Root = Service(game, 'Players').LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local runRen, runBeat = Run.RenderStepped, Run.Heartbeat
local runRenWait, runRenCon = runRen.Wait, runRen.Connect
local runBeatCon = runBeat.Connect
local Ping = statPing.GetValue
local function Sleep()
    Property(Root, 'NetworkIsSleeping', true)
end
local function Init()
    local rootVel = Root.Velocity
    local rootAng = Random(-180, 180)
    local rootOffset = Vector(
        Random(-velMax, velMax),
        -Random(0, velMax),
        Random(-velMax, velMax)
    )
    Root.CFrame *= Angle(0, Radian(rootAng), 0)
    Root.Velocity = rootOffset
    runRenWait(runRen) 
    Root.CFrame *= Angle(0, Radian(-rootAng), 0)
    Root.Velocity = rootVel
end
local desyncEnabled = false
local desyncLoop
local function toggleDesync(state)
    desyncEnabled = state
    if desyncEnabled then
        desyncLoop = Run.Heartbeat:Connect(function()
            Init()
            Wait(timeRelease)
            local chokeClient, chokeServer = runBeatCon(runBeat, Sleep), runRenCon(runRen, Sleep)
            Wait(Ceil(Ping(statPing)) / 1000)
            chokeClient:Disconnect()
            chokeServer:Disconnect()
        end)
    else
        if desyncLoop then
            desyncLoop:Disconnect()
            desyncLoop = nil
        end
    end
end
anti:AddToggle(
    "Enable Desync",
    {
        Text = "Invisible Desync",
        Default = false,
        Tooltip = "Enable or Disable the desync feature",
        Callback = function(state)
            toggleDesync(state)  
        end
    }
)
net:AddToggle(
    "Enable Network Sleep",
    {
        Text = "Network FF",
        Default = false,
        Tooltip = "Toggle to simulate network sleep and enhance lag",
        Callback = function(state)
            if state then
                setfflag("S2PhysicsSenderRate", 2)
                local UserInputService = game:GetService("UserInputService")
                local Players = game:GetService("Players")
                local Client = Players.LocalPlayer
                local MainThread = task.spawn(function()
                    while state do
                        if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
                            sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", true)
                            task.wait()
                            sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
                        end
                        task.wait()
                    end
                end)
            else
                setfflag("S2PhysicsSenderRate", 13)
                local Client = Players.LocalPlayer
                if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
                    sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
                end
            end
        end
    }
)
game:GetService("RunService").Heartbeat:Connect(function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = character.HumanoidRootPart
        local vel = humanoidRootPart.Velocity
        if getgenv().cframespeedtoggle == true then
            humanoidRootPart.CFrame = humanoidRootPart.CFrame +
                character.Humanoid.MoveDirection * getgenv().speedvalue / 0.5
        end
        if getgenv().Venus and getgenv().Venus.AntiEnabled then
            if getgenv().Venus.AntiLock == "Predbreaker" then
                humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            elseif getgenv().Venus.AntiLock == "Sky" then
                humanoidRootPart.Velocity = Vector3.new(0, 100, 0)
            end
        end
        game:GetService("RunService").RenderStepped:Wait()
        humanoidRootPart.Velocity = vel
    end
end)
ant:AddToggle(
    "Enable Anti Lock",
    {
        Text = "Enable Anti Lock",
        Default = false,  
        Tooltip = "Toggle Anti Lock",
        Callback = function(state)
            getgenv().Venus = getgenv().Venus or {}  
            getgenv().Venus.AntiEnabled = state  
        end
    }
)
ant:AddDropdown(
    "AntiLockMode",
    {
        Values = {"Sky", "Predbreaker"},
        Default = 1,  
        Multi = false,  
        Text = "Anti Lock Mode",
        Tooltip = "Choose Anti Lock mode",
        Callback = function(value)
            getgenv().Venus = getgenv().Venus or {}  
            getgenv().Venus.AntiLock = value  
        end
    }
)
anti:AddToggle(
    "Desync Velocity",
    {
        Text = "Velocity Manipulation",
        Default = false,
        Tooltip = "Toggles the manipulation of velocity",
        Callback = function(state)
            getgenv().demisethebest = state  
        end
    }
)
game:GetService("RunService").heartbeat:Connect(function()
    if getgenv().demisethebest == true then 
        local abc = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(1,1,1) * (2^16)
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = abc
    end 
end)
local Plr = game.Players.LocalPlayer
local StateEnabled = false  
anti:AddToggle(
    "Enable Freefall Speed",
    {
        Text = "Freefall Velocity Boost",
        Default = false,
        Tooltip = "Enable faster freefall",
        Callback = function(state)
            StateEnabled = state  
        end
    }
)
Plr.Character:WaitForChild("Humanoid").StateChanged:Connect(function(old, new)
    if StateEnabled and new == Enum.HumanoidStateType.Freefall then
        wait(0.27)
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, -15, 0)
    end
end)
net:AddToggle(
    "Enable Underground",
    {
        Text = "Underground",
        Default = false,
        Tooltip = "Toggles the underground velocity manipulation",
        Callback = function(state)
            getgenv().Underground = state
        end
    }
)
net:AddInput(
    "Underground Amount",
    {
        Default = tostring(getgenv().UndergroundAmount),
        Numeric = true,
        Finished = true,
        Text = "Amount",
        Tooltip = "Adjust the downward velocity for the underground effect",
        Placeholder = "825",
        Callback = function(value)
            getgenv().UndergroundAmount = tonumber(value) or getgenv().UndergroundAmount
        end
    }
)
getgenv().UndergroundAmount = 825
game:GetService("RunService").heartbeat:Connect(function()
    if getgenv().Underground then
        local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, -getgenv().UndergroundAmount, 0)
        game:GetService("RunService").RenderStepped:Wait()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
    end
end)
local flySpeed = 50  
local flying = false  
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")
local userInputService = game:GetService("UserInputService")
local function startFlying()
    if not flying then
        flying = true
        humanoid.PlatformStand = true
        local bodyGyro = Instance.new("BodyGyro", character.PrimaryPart)
        local bodyVelocity = Instance.new("BodyVelocity", character.PrimaryPart)
        bodyGyro.P = 9e4
        bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        bodyGyro.CFrame = workspace.CurrentCamera.CFrame
        bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        local connection
        connection = game:GetService("RunService").RenderStepped:Connect(function()
            if flying then
                bodyGyro.CFrame = workspace.CurrentCamera.CFrame
                local moveDirection = Vector3.new(0, 0, 0)
                if humanoid.MoveDirection.Magnitude > 0 then
                    moveDirection = workspace.CurrentCamera.CFrame.LookVector * humanoid.MoveDirection.Magnitude
                end
                local verticalVelocity = 0
                if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                    verticalVelocity = flySpeed 
                elseif userInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
                    verticalVelocity = -flySpeed 
                end
                bodyVelocity.Velocity = moveDirection * flySpeed + Vector3.new(0, verticalVelocity, 0)
                humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
            else
                bodyVelocity.Velocity = Vector3.new(0, 0, 0) 
                connection:Disconnect() 
            end
        end)
    end
end
local function stopFlying()
    if flying then
        flying = false
        humanoid.PlatformStand = false
        for _, v in pairs(character.PrimaryPart:GetChildren()) do
            if v:IsA("BodyGyro") or v:IsA("BodyVelocity") then
                v:Destroy()
            end
        end
    end
end
fly:AddToggle(
    "Enable Fly",
    {
        Text = "Enable Fly",
        Default = false,
        Tooltip = "Enable or disable flying",
        Callback = function(state)
            if state then
                startFlying()
            else
                stopFlying()
            end
        end
    }
)
fly:AddSlider(
    "Fly Speed",
    {
        Text = "Adjust Fly Speed",
        Default = 50,
        Min = 0,
        Max = 100,
        Rounding = 1,
        Compact = false,
        Callback = function(value)
            flySpeed = value  
        end
    }
)
local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
local healthBarEnabled = false 
esp:AddToggle(
    "Boxes & Health Bars",
    {
        Text = "Boxes & Health Bars",
        Default = false,
        Tooltip = "Enable or Disable Boxes and Health Bars",
        Callback = function(state)
            healthBarEnabled = state
        end
    }
)
local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0, 3, 0)
local function createJamkleBox(v)
    local BoxOutline = Drawing.new("Square")
    BoxOutline.Visible = false 
    BoxOutline.Color = Color3.new(0, 0, 0)
    BoxOutline.Thickness = 3
    BoxOutline.Transparency = 1
    BoxOutline.Filled = false
    local Box = Drawing.new("Square")
    Box.Visible = false 
    Box.Color = Color3.new(1, 1, 1) 
    Box.Thickness = 1
    Box.Transparency = 1
    Box.Filled = false
    local HealthBarOutline = Drawing.new("Line")
    HealthBarOutline.Thickness = 1.5 
    HealthBarOutline.Color = Color3.new(0, 0, 0) 
    HealthBarOutline.Visible = false
    local HealthBar = Drawing.new("Line")
    HealthBar.Thickness = 1.5 
    HealthBar.Visible = false
    local function boxesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v.Character.Humanoid.Health > 0 then
                local Vector, onScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
                local RootPart = v.Character.HumanoidRootPart
                local Head = v.Character.Head
                local RootPosition, RootVis = worldToViewportPoint(CurrentCamera, RootPart.Position)
                local HeadPosition = worldToViewportPoint(CurrentCamera, Head.Position + HeadOff)
                local LegPosition = worldToViewportPoint(CurrentCamera, RootPart.Position - LegOff)
                if onScreen and healthBarEnabled then
                    Box.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                    Box.Position = Vector2.new(RootPosition.X - Box.Size.X / 2, RootPosition.Y - Box.Size.Y / 2)
                    Box.Visible = true 
                    HealthBarOutline.From = Vector2.new(Box.Position.X - 6, Box.Position.Y)
                    HealthBarOutline.To = Vector2.new(Box.Position.X - 6, Box.Position.Y + (HeadPosition.Y - LegPosition.Y))
                    HealthBarOutline.Visible = true
                    local healthRatio = v.Character.Humanoid.Health / v.Character.Humanoid.MaxHealth
                    HealthBar.From = Vector2.new(Box.Position.X - 6, Box.Position.Y)
                    HealthBar.To = Vector2.new(Box.Position.X - 6, Box.Position.Y + (HeadPosition.Y - LegPosition.Y) * healthRatio)
                    HealthBar.Color = Color3.fromRGB(255 * (1 - healthRatio), 255 * healthRatio, 0) 
                    HealthBar.Visible = true
                else
                    Box.Visible = false 
                    HealthBarOutline.Visible = false
                    HealthBar.Visible = false
                end
            else
                Box.Visible = false 
                HealthBarOutline.Visible = false
                HealthBar.Visible = false
            end
        end)
    end
    coroutine.wrap(boxesp)()
end
for _, v in pairs(game.Players:GetChildren()) do
    createJamkleBox(v)
end
game.Players.PlayerAdded:Connect(function(v)
    createJamkleBox(v)
end)
local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local CurrentCamera = workspace.CurrentCamera
local worldToViewportPoint = CurrentCamera.worldToViewportPoint
_G.TeamCheck = false 
local tracersEnabled = false 
esp:AddToggle(
    "Tracers",
    {
        Text = "Tracers",
        Default = false,
        Tooltip = "Enable or disable Tracers",
        Callback = function(state)
            tracersEnabled = state
        end
    }
)
for i,v in pairs(game.Players:GetChildren()) do
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.new(1, 1, 1)
    Tracer.Thickness = 1
    Tracer.Transparency = 1
    function lineesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if tracersEnabled and v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
                if OnScreen then
                    Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 1)
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)
                    if _G.TeamCheck and v.TeamColor == lplr.TeamColor then
                        Tracer.Visible = false
                    else
                        Tracer.Visible = true
                    end
                else
                    Tracer.Visible = false
                end
            else
                Tracer.Visible = false
            end
        end)
    end
    coroutine.wrap(lineesp)()
end
game.Players.PlayerAdded:Connect(function(v)
    local Tracer = Drawing.new("Line")
    Tracer.Visible = false
    Tracer.Color = Color3.new(1, 1, 1)
    Tracer.Thickness = 1
    Tracer.Transparency = 1
    function lineesp()
        game:GetService("RunService").RenderStepped:Connect(function()
            if tracersEnabled and v.Character ~= nil and v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("HumanoidRootPart") ~= nil and v ~= lplr and v.Character.Humanoid.Health > 0 then
                local Vector, OnScreen = camera:worldToViewportPoint(v.Character.HumanoidRootPart.Position)
                if OnScreen then
                    Tracer.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 1)
                    Tracer.To = Vector2.new(Vector.X, Vector.Y)
                    if _G.TeamCheck and v.TeamColor == lplr.TeamColor then
                        Tracer.Visible = false
                    else
                        Tracer.Visible = true
                    end
                else
                    Tracer.Visible = false
                end
            else
                Tracer.Visible = false
            end
        end)
    end
    coroutine.wrap(lineesp)()
end)
game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().FeatureEnabled then
    end
end)
local CrosshairEnabled = false
visuals:AddToggle(
    "Crosshair",
    {
        Text = "Crosshair",
        Default = false,
        Tooltip = "Enable or disable Crosshair",
        Callback = function(state)
            CrosshairEnabled = state
        end
    }
)
getgenv().crosshair = {
    enabled = true,
    refreshrate = 0.015,
    mode = 'center',
    position = Vector2.new(0, 0),
    width = 2.5,
    length = 10,
    radius = 11,
    color = Color3.fromRGB(86, 87, 142),  
    spin = true,
    spin_speed = 150,
    spin_max = 340,
    spin_style = Enum.EasingStyle.Circular,
    resize = true,
    resize_speed = 150,
    resize_min = 5,
    resize_max = 22,
}
local old; old = hookfunction(Drawing.new, function(class, properties)
    local drawing = old(class)
    for i, v in next, properties or {} do
        drawing[i] = v
    end
    return drawing
end)
local runservice = game:GetService('RunService')
local inputservice = game:GetService('UserInputService')
local tweenservice = game:GetService('TweenService')
local camera = workspace.CurrentCamera
local last_render = 0
local drawings = {
    crosshair = {},
    text = {
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = 'N4JBR', Color = Color3.new(255, 255, 255)}),
        Drawing.new('Text', {Size = 13, Font = 2, Outline = true, Text = '.CC', Color = Color3.fromRGB(86, 87, 142)}),
    }
}
for idx = 1, 4 do
    drawings.crosshair[idx] = Drawing.new('Line')
    drawings.crosshair[idx + 4] = Drawing.new('Line')
end
function solve(angle, radius)
    return Vector2.new(
        math.sin(math.rad(angle)) * radius,
        math.cos(math.rad(angle)) * radius
    )
end
runservice.PostSimulation:Connect(function()
    local _tick = tick()
    if _tick - last_render > crosshair.refreshrate then
        last_render = _tick
        local position = camera.ViewportSize / 2
        local text_1 = drawings.text[1]
        local text_2 = drawings.text[2]
        text_1.Visible = CrosshairEnabled
        text_2.Visible = CrosshairEnabled
        if CrosshairEnabled then
            local text_x = text_1.TextBounds.X + text_2.TextBounds.X
            text_1.Position = position + Vector2.new(-text_x / 2, crosshair.radius + (crosshair.resize and crosshair.resize_max or crosshair.length) + 5)
            text_2.Position = text_1.Position + Vector2.new(text_1.TextBounds.X, 0)
            text_2.Color = Color3.fromRGB(86, 87, 142)
            for idx = 1, 4 do
                local outline = drawings.crosshair[idx]
                local inline = drawings.crosshair[idx + 4]
                local angle = (idx - 1) * 90
                local length = crosshair.length
                if crosshair.spin then
                    local spin_angle = -_tick * crosshair.spin_speed % crosshair.spin_max
                    angle = angle + tweenservice:GetValue(spin_angle / 360, crosshair.spin_style, Enum.EasingDirection.InOut) * 360
                end
                if crosshair.resize then
                    local resize_length = tick() * crosshair.resize_speed % 180
                    length = crosshair.resize_min + math.sin(math.rad(resize_length)) * crosshair.resize_max
                end
                inline.Visible = true
                inline.Color = Color3.fromRGB(86, 87, 142)  
                inline.From = position + solve(angle, crosshair.radius)
                inline.To = position + solve(angle, crosshair.radius + length)
                inline.Thickness = crosshair.width
                outline.Visible = true
                outline.From = position + solve(angle, crosshair.radius - 1)
                outline.To = position + solve(angle, crosshair.radius + length + 1)
                outline.Thickness = crosshair.width + 1.5    
            end
        else
            for idx = 1, 4 do
                drawings.crosshair[idx].Visible = false
                drawings.crosshair[idx + 4].Visible = false
            end
        end
    end
end)
local effectEnabled = false 
local forceFieldColor = Color3.fromRGB(128, 0, 128) 
visuals:AddToggle(
    "Visuals",
    {
        Text = "Force Field", 
        Default = false,
        Tooltip = "Enable or disable the effect on MeshParts ",
        Callback = function(state)
            effectEnabled = state
        end
    }
)
Toggles.Visuals:AddColorPicker(
    "Color",
    {
        Default = Color3.fromRGB(128, 0, 128), 
        Title = "Force Field Color", 
        Callback = function(color)
            forceFieldColor = color 
        end
    }
)
spawn(function()
    while wait() do
        for _, part in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if part:IsA("MeshPart") then
                if effectEnabled then
                    part.Material = Enum.Material.ForceField
                    part.Color = forceFieldColor 
                else
                    part.Material = Enum.Material.SmoothPlastic 
                    part.Color = Color3.fromRGB(255, 255, 255) 
                end
            end
        end
    end
end)
visuals:AddLabel('')
local Lighting = game:GetService("Lighting")
local fogColor = Color3.fromRGB(255, 0, 0) 
Lighting.FogColor = Color3.fromRGB(255, 255, 255) 
Lighting.FogStart = 10000 
Lighting.FogEnd = 10000 
Lighting.Brightness = 1 
Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127) 
local function enableFog()
    Lighting.FogColor = fogColor 
    Lighting.FogStart = 0 
    Lighting.FogEnd = 100 
    Lighting.Brightness = 0.2 
    Lighting.OutdoorAmbient = fogColor 
    print("Intense fog enabled with color:", fogColor)
end
local function disableFog()
    Lighting.FogColor = Color3.fromRGB(255, 255, 255) 
    Lighting.FogStart = 10000 
    Lighting.FogEnd = 10000 
    Lighting.Brightness = 1 
    Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127) 
    print("Fog disabled.")
end
fog:AddToggle(
    "Enable Fog",
    {
        Text = "Enable Fog",
        Default = false, 
        Tooltip = "Toggle fog effect",
        Callback = function(state)
            if state then
                enableFog() 
            else
                disableFog() 
            end
        end
    }
)
fog:AddLabel('Fog Color'):AddColorPicker('FogColorPicker', {
    Default = fogColor, 
    Title = 'Select Fog Color', 
    Transparency = nil, 
    Callback = function(value)
        fogColor = value 
        if Lighting.FogStart == 0 then 
            Lighting.FogColor = fogColor 
            Lighting.OutdoorAmbient = fogColor 
        end
        print("[cb] Fog color changed to:", fogColor)
    end
})
fog:AddLabel('')
local circle  
local function getCircle()
    if not circle then
        circle = Drawing.new("Circle")
        circle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)  
        circle.Radius = 120  
        circle.Color = Color3.fromRGB(255, 255, 255)  
        circle.Thickness = 1
        circle.Filled = false  
    end
    return circle
end
local circleEnabled = false
local circleFilled = false
fov:AddToggle(
    "Enable Circle", 
    {
        Text = "Enable Circle",
        Default = false,
        Tooltip = "Toggle to enable or disable the circle",
        Callback = function(state)
            circleEnabled = state
            local circleInstance = getCircle()
            circleInstance.Visible = circleEnabled
        end
    }
)
fov:AddToggle(
    "Filled",
    {
        Text = "Filled",
        Default = false,
        Tooltip = "Toggle to fill the circle",
        Callback = function(state)
            circleFilled = state
            local circleInstance = getCircle()  
            circleInstance.Filled = circleFilled  
        end
    }
)
fov:AddSlider(
    "Circle Size",
    {
        Min = 20,  
        Max = 300,  
        Default = 120,  
        Rounding = 0,  
        Text = "Circle Size",
        Tooltip = "Adjust the size of the circle",
        Callback = function(size)
            local circleInstance = getCircle()  
            if circleInstance then  
                circleInstance.Radius = size  
            end
        end
    }
)
fov:AddLabel('Circle Color'):AddColorPicker('ColorPicker', {
    Default = circle and circle.Color or Color3.fromRGB(255, 255, 255),  
    Title = 'Circle Color',  
    Transparency = nil,  
    Callback = function(Value)
        local circleInstance = getCircle()  
        if circleInstance then  
            circleInstance.Color = Value  
        end
        print('[cb] Color changed!', Value)
    end
})
fov:AddLabel('')
local circleInstance = getCircle()
circleInstance.Visible = circleEnabled
local MenuGroup = Tabs['UI Settings']:AddRightGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
Library.ToggleKeybind = Options.MenuKeybind
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('failurty.CC')
SaveManager:SetFolder('failurty/configs')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RS = game:GetService("RunService")
local WS = game:GetService("Workspace")
local GS = game:GetService("GuiService")
local LP = Players.LocalPlayer
local Mouse = LP:GetMouse()
local Camera = WS.CurrentCamera
local GetGuiInset = GS.GetGuiInset
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
getgenv().venus = {
    ["Enabled"] = true,
    ["AimPart"] = "Head",
    ["Prediction"] = 0.12588,
    ["Smoothness"] = 1,
    ["ShakeValue"] = 0,
    ["AutoPred"] = true,
    ["Loaded"] = false,
    ["TTKO"] = false,
    ["Mode"] = "Controller",
    ["cframe"] = {
        ["enabled"] = false,
        ["speed"] = 2,
        ["TargetStrafe"] = {
            ["Enabled"] = false,
            ["StrafeSpeed"] = 10,
            ["StrafeRadius"] = 7,
            ["StrafeHeight"] = 3,
            ["RandomizerMode"] = true
        }
    }
}
getgenv().Fov = {
    ["FOVSize"] = 90,
    ["FOVColor"] = Color3.fromRGB(255, 0, 0),
    ["FOVVisible"] = true,
    ["FOVShape"] = "Circle"
}
getgenv().targetaim= {
    ["enabled"] = true,
    ["targetPart"] = "UpperTorso",
    ["prediction"] = 0.12588
}
getgenv().desync = {
    ["sky"] = false,
    ["invis"] = true,
    ["jump"] = false,
    ["network"] = false
}
getgenv().Misc = {
    ["LowGfx"] = false,
}
getgenv().FPSunlocker = {
    ["Enabled"] = true,
    ["FPSCap"] = 999
}
getgenv().Triggerbot = {
    ["ClosestPart"] = {
        ["HitParts"] = {"Head", "UpperTorso", "LowerTorso", "HumanoidRootPart", "RightFoot", "LeftFoot"}
    },
    ["FOV"] = {
        ["Enabled"] = true,
        ["Size"] = 13,
        ["Centered FOV"] = true,
        ["Visible"] = false,
        ["Filled"] = false,
        ["Color"] = Color3.fromRGB(255, 0, 0)
    },
    ["Settings"] = {
        ["Prediction"] = 0.111,
        ["Click Delay"] = 0.1,
        ["Activation Delay"] = 2,
        ["IgnoreFriends"] = false,
        ["Automatically Fire"] = false,
    }
}
local userInputService = game:GetService("UserInputService")
local AimlockState = true
local Locked = false
local Victim
local target
if venus.Loaded then
    notify("Venus.CC is Already Loaded!")
    return
end
venus.Loaded = true
local function GetClosestPlayer()
    local closestPlayer = nil
    local shortestScore = math.huge
    local centerScreen = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local maxAngle = 30 
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= player and plr.Character and plr.Character:FindFirstChild(venus.AimPart) and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health > 0 then
            local part = plr.Character[venus.AimPart]
            local relativePos = part.Position - Camera.CFrame.Position
            local playerDistance = relativePos.Magnitude
            local screenPosition, onScreen = Camera:WorldToViewportPoint(part.Position)
            if onScreen then
                local angle = math.deg(math.acos(Camera.CFrame.LookVector:Dot(relativePos.Unit)))
                if angle <= maxAngle then
                    local mouseDistance = (Vector2.new(screenPosition.X, screenPosition.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                    local score = mouseDistance * 0.02 + angle * 0.03 
                    if angle < 5 then
                        score = score * 0.001 
                    end
                    local ray = Ray.new(Camera.CFrame.Position, relativePos.Unit * playerDistance)
                    local hitPart = WS:FindPartOnRayWithIgnoreList(ray, {player.Character})
                    if (not hitPart or hitPart:IsDescendantOf(plr.Character)) and score < shortestScore then
                        closestPlayer = plr
                        shortestScore = score
                    end
                end
            end
        end
    end
    return closestPlayer
end
local notificationsEnabled = false 
assist:AddToggle(
    "Enable Notifications",
    {
        Text = "Notifications",
        Default = false,
        Tooltip = "Enable or disable notifications",
        Callback = function(state)
            notificationsEnabled = state
        end
    }
)
local function ToggleLock()
    if AimlockState then
        Locked = not Locked
        if Locked then
            if LockButton then
                LockButton.Image = "rbxassetid://78342062013795" 
            end
            Victim = GetClosestPlayer()
            target = Victim
            if Victim then
                if venus.Enabled and notificationsEnabled then
                    NotificationSystem:Notify("Camlock: Locked onto " .. tostring(Victim.Name), 5)
                elseif targetaim.enabled and notificationsEnabled then
                    NotificationSystem:Notify("Target Lock: Locked onto " .. tostring(target.Name), 5)
                end
            else
                if venus.Enabled and notificationsEnabled then
                    NotificationSystem:Notify("Camlock: No target found", 5)
                elseif targetaim.enabled and notificationsEnabled then
                    NotificationSystem:Notify("Target Lock: No target found", 5)
                end
            end
        else
            if LockButton then
                LockButton.Image = "rbxassetid://134820707156642" 
            end
            Victim = nil
            target = nil
            if venus.Enabled and notificationsEnabled then
                NotificationSystem:Notify("Camlock: Unlocked!", 5)
            elseif targetaim.enabled and notificationsEnabled then
                NotificationSystem:Notify("Target Lock: Unlocked!", 5)
            end
        end
    else
        if not venus.Enabled and notificationsEnabled then
            NotificationSystem:Notify("Camlock not enabled", 5)
        end
    end
end
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local userInputService = game:GetService("UserInputService")
local LockButton
function spawnButton()
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local function setupGui()
        local screenGui = playerGui:FindFirstChild("LockScreenGui")
        if not screenGui then
            screenGui = Instance.new("ScreenGui")
            screenGui.Name = "LockScreenGui"
            screenGui.Parent = playerGui
        end
        LockButton = screenGui:FindFirstChild("LockButton")
        if not LockButton then
            LockButton = Instance.new("ImageButton")
            LockButton.Name = "LockButton"
            LockButton.Size = UDim2.new(0, 80, 0, 80)
            LockButton.Position = UDim2.new(0.5, -250, 0.8, -225)
            LockButton.Image = "rbxassetid://134820707156642" 
            LockButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            LockButton.BackgroundTransparency = 0.450
            LockButton.Parent = screenGui
            LockButton.Active = true
            LockButton.Draggable = true
            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 10)
            UICorner.Parent = LockButton
            LockButton.MouseButton1Click:Connect(function()
                ToggleLock() 
            end)
        end
    end
    setupGui()
    game.Players.LocalPlayer.CharacterAdded:Connect(function()
        setupGui()
    end)
end
spawnButton()
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    spawnButton()
end)
RS.RenderStepped:Connect(function()
    if AimlockState and Victim and Victim.Character and Victim.Character:FindFirstChild(venus.AimPart) then
        local aimPart = Victim.Character[venus.AimPart]
        local predictedPosition = aimPart.Position 
            + aimPart.Velocity * venus.Prediction
            + Vector3.new(0, venus.JumpOffset, 0)
        if venus.LookAtEnabled and targetaim.enabled then
            local lookPosition = CFrame.new(Camera.CFrame.p, predictedPosition)
            Camera.CFrame = Camera.CFrame:Lerp(lookPosition, venus.Smoothness)
            local playerHRP = player.Character.HumanoidRootPart
            playerHRP.CFrame = CFrame.new(playerHRP.Position, Vector3.new(predictedPosition.X, playerHRP.Position.Y, predictedPosition.Z))
        end
        if AimlockState then
            local playerHRP = player.Character.HumanoidRootPart
            local camlockPosition = CFrame.new(Camera.CFrame.p, predictedPosition)
            Camera.CFrame = Camera.CFrame:Lerp(camlockPosition, venus.Smoothness)
            if venus.cframe.TargetStrafe.Enabled then
                local lp = player.Character
                local targpos = Victim.Character.HumanoidRootPart.Position
                local angle = tick() * venus.cframe.TargetStrafe.StrafeSpeed
                local strafeOffset = Vector3.new(
                    math.cos(angle) * venus.cframe.TargetStrafe.StrafeRadius,
                    venus.cframe.TargetStrafe.Height,
                    math.sin(angle) * venus.cframe.TargetStrafe.StrafeRadius
                )
                local strafePosition = targpos + strafeOffset
                strafePosition = Vector3.new(strafePosition.X, math.max(strafePosition.Y, targpos.Y), strafePosition.Z)
                lp:SetPrimaryPartCFrame(CFrame.new(strafePosition))
                playerHRP.CFrame = CFrame.new(
                    playerHRP.Position,
                    Vector3.new(targpos.X, playerHRP.Position.Y, targpos.Z)
                )
            end
        end
        if venus.AutoAirEnabled then
            local TargetRootPart = Victim.Character:FindFirstChild("HumanoidRootPart")
            if TargetRootPart then
                local TargetVel = TargetRootPart.Velocity
                if TargetVel.Y > 25 then
                    local Character = LocalPlayer.Character
                    if Character then
                        local Tool = Character:FindFirstChildOfClass("Tool")
                        if Tool then
                            Tool:Activate()
                        end
                    end
                end
            end
        end
    end
end)
local mt = getrawmetatable(game)
local oldNameCall = mt.__namecall
setreadonly(mt, false)
mt.__namecall = newcclosure(function(Self, ...)
    local args = {...}
    local methodName = getnamecallmethod()
    if not checkcaller() and methodName == "FireServer" and targetaim.enabled then
        for i, Argument in ipairs(args) do
            if typeof(Argument) == "Vector3" and target and target.Character then
                local targetPart = target.Character[targetaim.targetPart]
                if targetPart then
                    args[i] = targetPart.Position 
                        + targetPart.Velocity * venus.Prediction
                        + Vector3.new(0, venus.JumpOffset, 0)
                    return oldNameCall(Self, unpack(args))
                end
            end
        end
    end
    return oldNameCall(Self, ...)
end)
setreadonly(mt, true)
while task.wait() do
    if venus.Enabled and venus.AutoPred then
        local pingValue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
        local ping = tonumber((pingValue:match("%d+")))
        if ping then
            if ping > 225 then
                venus.Prediction = 0.166547
            elseif ping > 215 then
                venus.Prediction = 0.15692
            elseif ping > 205 then
                venus.Prediction = 0.165732
            elseif ping > 190 then
                venus.Prediction = 0.1690
            elseif ping > 185 then
                venus.Prediction = 0.1235666
            elseif ping > 180 then
                venus.Prediction = 0.16779123
            elseif ping > 175 then
                venus.Prediction = 0.165455312399999
            elseif ping > 170 then
                venus.Prediction = 0.16
            elseif ping > 165 then
                venus.Prediction = 0.15
            elseif ping > 160 then
                venus.Prediction = 0.1223333
            elseif ping > 155 then
                venus.Prediction = 0.125333
            elseif ping > 150 then
                venus.Prediction = 0.1652131
            elseif ping > 145 then
                venus.Prediction = 0.129934
            elseif ping > 140 then
                venus.Prediction = 0.1659921
            elseif ping > 135 then
                venus.Prediction = 0.1659921
            elseif ping > 130 then
                venus.Prediction = 0.12399
            elseif ping > 125 then
                venus.Prediction = 0.15465
            elseif ping > 110 then
                venus.Prediction = 0.142199
            elseif ping > 105 then
                venus.Prediction = 0.141199
            elseif ping > 100 then
                venus.Prediction = 0.134143
            elseif ping > 90 then
                venus.Prediction = 0.1433333333392
            elseif ping > 80 then
                venus.Prediction = 0.143214443
            elseif ping > 70 then
                venus.Prediction = 0.14899911
            elseif ping > 60 then
                venus.Prediction = 0.148325
            elseif ping > 50 then
                venus.Prediction = 0.128643
            elseif ping > 40 then
                venus.Prediction = 0.12766
            elseif ping > 30 then
                venus.Prediction = 0.124123
            elseif ping > 20 then
                venus.Prediction = 0.12435
            elseif ping > 10 then
                venus.Prediction = 0.1234555
            elseif ping < 10 then
                venus.Prediction = 0.1332
            else
                venus.Prediction = 0.1342
            end
        end
    end
end
if desync.sky == true then
    getgenv().VenusSky = true 
    getgenv().SkyAmount = 90
    game:GetService("RunService").Heartbeat:Connect(function()
        if getgenv().VenusSky then 
            local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, getgenv().SkyAmount, 0) 
            game:GetService("RunService").RenderStepped:Wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
        end
    end)
end
if desync.jump == true then
    getgenv().jumpanti = true
    game:GetService("RunService").Heartbeat:Connect(function()
        if getgenv().jumpanti then    
            local CurrentVelocity = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(1000, 1000, 1000)
            game:GetService("RunService").RenderStepped:Wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = CurrentVelocity
        end
    end)
end
if desync.jump == true then
local velMax = (128 ^ 2)
local timeRelease, timeChoke = 0.015, 0.105
local Property, Wait = sethiddenproperty, task.wait
local Radian, Random, Ceil = math.rad, math.random, math.ceil
local Angle = CFrame.Angles
local Vector = Vector3.new
local Service = game.GetService
local Run = Service(game, 'RunService')
local Stats = Service(game, 'Stats')
local Players = Service(game, 'Players')
local LocalPlayer = Players.LocalPlayer
local statPing = Stats.PerformanceStats.Ping
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Root = Character:WaitForChild("HumanoidRootPart")
local Mouse = LocalPlayer:GetMouse()
local runRen, runBeat = Run.RenderStepped, Run.Heartbeat
local runRenWait, runRenCon = runRen.Wait, runRen.Connect
local runBeatCon = runBeat.Connect
local function Ping()
    return statPing:GetValue()
end
local function Sleep()
    Property(Root, 'NetworkIsSleeping', true)
end
local function FireGun()
    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if tool and tool:FindFirstChild("Shoot") then
        local ShootEvent = tool.Shoot
        ShootEvent:FireServer(Mouse.Hit.Position)
    end
end
local function Init()
    if not Root then return end
    local rootVel = Root.Velocity
    local rootCFrame = Root.CFrame
    local rootAng = Random(-180, 180)
    local rootOffset do
        local X = Random(-velMax, velMax)
        local Y = Random(0, velMax)
        local Z = Random(-velMax, velMax)
        rootOffset = Vector(X, -Y, Z)
    end
    Root.CFrame = Angle(0, Radian(rootAng), 0)
    Root.Velocity = rootOffset
    FireGun()
    runRenWait(runRen)
    Root.CFrame = rootCFrame
    Root.Velocity = rootVel
end
runBeatCon(runBeat, Init)
while Wait(timeRelease) do
    local chokeClient, chokeServer = runBeatCon(runBeat, Sleep), runRenCon(runRen, Sleep)
    Wait(Ceil(Ping()) / 1000)
    chokeClient:Disconnect()
    chokeServer:Disconnect()
end
end
if desync.network == true then
local RunService = game:GetService("RunService")
local function onHeartbeat()
    setfflag("S2PhysicsSenderRate", 1)
end
RunService.Heartbeat:Connect(onHeartbeat)
end
if Misc.LowGfx == true then
game:GetService("CorePackages").Packages:Destroy()
end
